#include <iostream>
#include <cmath> // math function
#include <iomanip> 
#include <cstdlib> //for rand and srand
#include <ctime> //time function
#include <cstring> // compare c-strings library
#include <stdlib.h>     //for srand, rand 

using namespace std;


//function prototypes
void arrSelectSort(int *[], int);
void showArray(int [], int);
void showArrPtr(int *[], int);

int main()
{
    //Chapter 9.6 - Case Study Modification #1 - Coded by Quanysha Jones
    //modify program 9-17 (the united cause case study program) so it can be used with any 
    //set of donations. the program should dynamically allocate the donations array and ask 
    //the user to input values.
    
    //this program shows the donations made to the united cause by the employees of CK 
    //graphics, Inc. it displays the donations in order from lowest to highest and in the 
    //orginal order they were recieved.
    
    int NumOfDonations, *Donations; 
    //int *Donations[NumOfDonations];
    //an array of pointers to int. 
    int *DonationsPtr[NumOfDonations];
    
    cout << "This program will take the donations you have and put them in order:" << endl;
    cout << endl;
    cout << "How many donations are we dealing with? " << endl;
    cin >> NumOfDonations; 
    
    //dynamically allocate an array large enough to hold that many test score.
    Donations = new int[NumOfDonations]; 
    
    //collect test scores
    cout << "Enter the dollar amount of each donations: " << endl; 
    for (int count = 0; count < NumOfDonations; count++)
    {
        cout << "for donation #" << (count + 1) << endl;
        cin >> Donations[count];
        
        //no negative scores
        while (*Donations <= -1)
        {
            cout << "Enter a positive donation amount: " << endl;
            cin >> Donations[count];
        }
    }
    
    //cout << Donations[3] << endl;
    
    
    //each element of arrayPtr is a pointer to int. make each element point to an element 
    //in the donation array.
    for (int count = 0; count < NumOfDonations; count++)
    {
        DonationsPtr[count] = &Donations[count];
    }
    
    //sort the element of the array of pointers
    arrSelectSort(DonationsPtr,NumOfDonations);
    
    //display the donations using the array of pointers. This will display them in sorted 
    //order.
    cout << "The donations, sorted in ascending order, are: \n";
    showArrPtr(DonationsPtr, NumOfDonations);
    
    //display the orginal donations in their orginal order.
    cout << "The donations in their orignal order, are: \n";
    showArray(Donations,NumOfDonations);
    
    delete [] Donations;
    
    return 0;
}

//this function performs an ascending order selection sort on array, which is an array of pointers.
//each element of array points to an element of a second array. after the sort, array will point to the 
//elements of the second array in ascending order.
void arrSelectSort(int *array[], int size)
{
   int startScan, minIndex;
   int *minElem;
   //begin looping on all elements until second to last
   for (startScan = 0; startScan < (size - 1); startScan++)
   {
       //initialize minElem(NumOfTestScore) and minIndex to first element
       minIndex = startScan;
       minElem = array[startScan];
       //loop on all remaining elements of array
       for (int index = (startScan +1); index < size; index++)
       {
           //check if current element is greater than "minElem"
           if (*(array[index]) < *minElem)
           {
               //update minElem and minIndex to
               //respective values of current element
               minElem = array[index];
               minIndex = index;
           }
       }
       array[minIndex] = array[startScan];
       array[startScan] = minElem;
   }
}

//this function displays the content of array. size is the number of elements
void showArray(int array[], int size)
{
    for (int count = 0; count < size; count++)
    {
        cout << array[count] << " ";
    }
    cout << endl;
}

//the function displays the contents of the array pointed to by array. size is 
//the number of elements
void showArrPtr(int *array[], int size)
{
    for (int count = 0 ; count < size; count++)
    {
        cout << *(array[count]) << " ";
    }
    cout << endl;
}
    
